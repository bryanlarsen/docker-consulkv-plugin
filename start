#!/bin/bash

set -eo pipefail

: ${KV_CONSUL_IP:="127.0.0.1"}
: ${KV_CONSUL_PORT:="8500"}
: ${KV_CONSUL_URL:="http://${KV_CONSUL_IP}:${KV_CONSUL_PORT}/v1/kv/${KV_CONSUL_PREFIX}"}

# input: $(cat)
# output as global variables:
#   service_names: array
#   service_ids: array
#   ports: associative array   port => index into service_ids
#   out: associative array  key => value
#   flags: associative array  key => consul flags
setup() {
    unset env
    declare -A -g env

    while read var ; do
        IFS='=' read -a env_split <<< "${var}"
        local combined="$(printf "=%s" "${env_split[@]:1}")"
        combined="${combined:1}"
        env[${env_split[0]}]="${combined}"
    done < <(echo -n "$1" | jq -r ".Config.Env | .[]")

    container_name=$(echo -n "$1" | jq -r ".Name")
    container_name="${container_name##/}"

    service_name=$(echo -n "$1" | jq -r ".Config.Image")
    IFS='/' read -a name_split <<< "${service_name}"
    if ! [ -z "${name_split[1]}" ] ; then service_name="${name_split[1]}"; fi

    portps=( $(echo -n "$1" | jq -r ".NetworkSettings.Ports | keys | .[]" 2> /dev/null) )

    service_names=()
    service_ids=()

    unset ports
    declare -A -g ports

    if [ ${#portps[*]} -eq 0 ] ; then
        service_names[0]="${service_name}"
        if ! [ -z "${env[SERVICE_NAME]}" ] ; then service_names[0]="${env[SERVICE_NAME]}"; fi

        service_ids[0]="$(hostname):${container_name}"
        if ! [ -z "${env[SERVICE_ID]}" ] ; then service_ids[0]="${env[SERVICE_ID]}"; fi
    fi

    for i in `seq ${#portps[*]}` ; do
        port=${portps[$i-1]}
        IFS='/' read -a port_split <<< "${port}"
        port="${port_split[0]}"
        ports["${port_split[0]}"]=$((i - 1))
        protocol="${port_split[1]}"

        service_names[$i-1]="${service_name}"
        if [ ${#portps[*]} -gt 1 ] ; then service_names[$i-1]="${service_name}-${port}"; fi

        if ! [ -z "${env[SERVICE_NAME]}" ] ; then service_names[$i-1]="${env[SERVICE_NAME]}"; fi
        if ! [ -z "${env[SERVICE_${port}_NAME]}" ] ; then service_names[$i-1]="${env[SERVICE_${port}_NAME]}"; fi

        service_ids[$i-1]="$(hostname):${container_name}:${port}"
        if [ "$protocol" = "udp" ] ; then service_ids[$i-1]="${service_ids[$i-1]}:udp"; fi

        if ! [ -z "${env[SERVICE_ID]}" ] ; then service_ids[$i-1]="${env[SERVICE_ID]}"; fi
        if ! [ -z "${env[SERVICE_${port}_ID]}" ] ; then service_ids[$i-1]="${env[SERVICE_${port}_ID]}"; fi
    done

    unset out
    declare -A -g out

    unset flags
    declare -A -g flags

    for k in ${!env[@]} ; do
        local key_split
        IFS=':' read -a key_split <<< "$k"

        local cmd="${key_split[0]}"
        local key

        if [[ ${#key_split[@]} == 3 && ${key_split[1]} == SERVICE ]] ; then
            key="${service_names[0]}/${service_ids[0]}/${key_split[2]}"
        elif [[ ${#key_split[@]} == 4 && ${key_split[1]} == SERVICE ]] ; then
            local i="${ports[${key_split[2]}]}"
            key="${service_names[$i]}/${service_ids[$i]}/${key_split[3]}"
        elif [[ ${#key_split[@]} == 2 ]] ; then
            key="${key_split[1]}"
        fi

        if [[ ( ! -z $key ) && $cmd == KV_SET ]] ; then
            if [[ $key == *\? ]] ; then
                out["${key%%\?}"]=${env["$k"]}
                flags["${key%%?}"]="?cas=0"
            else
                out["$key"]=${env["$k"]}
            fi
        fi
    done
}

process() {
    for key in ${!out[@]} ; do
        if ! curl -s -X PUT -d "${out[$key]}" "${KV_CONSUL_URL}${key}${flags[$key]}" > /dev/null ; then
            echo "cannot PUT to ${KV_CONSUL_URL}${key}${flags[$key]}"
        fi
    done
}

do_test() {
    set -e

    setup "$(cat test_data/redis)"
    [ ${#service_names[@]} -eq 1 ]
    [ ${service_names[0]} = "redis" ]
    [ ${service_ids[0]} = "$(hostname):tender_euclid:6379" ]

    [ ${out[foo]} = "1" ]
    [ -z ${flags[foo]} ]
    [ ${out[bar]} = "2" ]
    [ ${flags[bar]} = "?cas=0" ]

    [ ${out["redis/$(hostname):tender_euclid:6379/baz"]} = "3" ]
    [ -z ${flags["redis/$(hostname):tender_euclid:6379/baz"]} ]
    [ ${out["redis/$(hostname):tender_euclid:6379/bat"]} = "4" ]
    [ ${flags["redis/$(hostname):tender_euclid:6379/bat"]} = "?cas=0" ]

    [ ${out["patho"]} = "with=equals" ]
    [[ ${out["patho2"]} = "with space" ]]
    [ ${out["patho3"]} = "with:colon" ]
    [[ ${out["patho4"]} = "with=equals, space and:colon" ]]
    echo "1 pass"

    setup "$(cat test_data/redis-multiple-ports)"
    [ ${#service_names[@]} -eq 2 ]
    [ ${service_names[0]} = "redis-6379" ]
    [ ${service_ids[0]} = "$(hostname):tender_euclid:6379" ]
    [ ${service_names[1]} = "redis-6779" ]
    [ ${service_ids[1]} = "$(hostname):tender_euclid:6779:udp" ]
    [ ${out["redis-6379/$(hostname):tender_euclid:6379/baz"]} = "3" ]
    echo "2 pass"

    setup "$(cat test_data/redis-explicit-name-id)"
    [ ${#service_names[@]} -eq 1 ]
    [ ${#service_ids[@]} -eq 1 ]
    [ ${service_names[0]} = "myredis" ]
    [ ${service_ids[0]} = "myredis-0" ]

    [ ${out["myredis/myredis-0/baz"]} = "3" ]
    [ ${out["myredis/myredis-0/bat"]} = "4" ]
    [ ${flags["myredis/myredis-0/bat"]} = "?cas=0" ]
    echo "3 pass"

    setup "$(cat test_data/redis-explicit-multiple)"
    [ ${#service_names[@]} -eq 2 ]
    [ ${service_names[0]} = "myredis" ]
    [ ${service_ids[0]} = "myredis-0" ]
    [ ${service_names[1]} = "redis-6779" ]
    [ ${service_ids[1]} = "$(hostname):tender_euclid:6779:udp" ]
    [ ${out["myredis/myredis-0/baz"]} = "3" ]
    echo "4 pass"

    setup "$(cat test_data/no-ports)"
    [ ${#out[@]} -eq 2 ]
    [ ${out[foo]} = "4" ]
    [ ${out["redis/$(hostname):tender_euclid/baz"]} = "7" ]
    echo "all tests passed!"
}

if [ $# -eq 0 ] ; then
    echo "running tests"
    do_test
else
    setup $(cat)
    process
fi
