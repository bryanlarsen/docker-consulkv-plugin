#!/bin/bash

set -eo pipefail

: ${KV_CONSUL_IP:="127.0.0.1"}
: ${KV_CONSUL_PORT:="8500"}
: ${KV_CONSUL_URL:="http://${KV_CONSUL_IP}:${KV_CONSUL_PORT}/v1/kv/${KV_CONSUL_PREFIX}"}

# input: $(cat)
# output as global variables:
#   service_names: array
#   service_ids: array
#   host_ports: array
#   ports: associative array   port => index into above arrays
#   out: associative array  key => value
#   flags: associative array  key => consul flags
setup() {
    unset env
    declare -A -g env

    # populate ENV from $1
    while read var ; do
        IFS='=' read -a env_split <<< "${var}"
        local combined="$(printf "=%s" "${env_split[@]:1}")"
        combined="${combined:1}"
        env[${env_split[0]}]="${combined}"
    done < <(echo -n "$1" | jq -r ".Config.Env | .[]")

    container_name=$(echo -n "$1" | jq -r ".Name")
    container_name="${container_name##/}"

    container_id=$(echo -n "$1" | jq -r ".Id")
    image_id=$(echo -n "$1" | jq -r ".Image")

    image_name=$(echo -n "$1" | jq -r ".Config.Image")
    if [[ $image_name =~ .*/(.*) ]] ; then image_name=${BASH_REMATCH[1]}; fi
    if [[ $image_name =~ (.*):.* ]] ; then image_name=${BASH_REMATCH[1]}; fi

    portps=( $(echo -n "$1" | jq -r ".NetworkSettings.Ports | keys | .[]" 2> /dev/null) )

    service_names=()
    service_ids=()

    unset ports
    declare -A -g ports

    if [ ${#portps[*]} -eq 0 ] ; then
        service_names[0]="${image_name}"
        if ! [ -z "${env[SERVICE_NAME]}" ] ; then service_names[0]="${env[SERVICE_NAME]}"; fi

        service_ids[0]="$(hostname):${container_name}"
        if ! [ -z "${env[SERVICE_ID]}" ] ; then service_ids[0]="${env[SERVICE_ID]}"; fi
    fi

    for i in `seq ${#portps[*]}` ; do
        local port=${portps[$i-1]}
        local host_port=$(echo -n "$1" | jq -r ".NetworkSettings.Ports[\"${port}\"][0].HostPort")
        IFS='/' read -a port_split <<< "${port}"
        port="${port_split[0]}"
        ports["${port_split[0]}"]=$((i - 1))
        local protocol="${port_split[1]}"

        host_ports[$i-1]="${host_port}"
        service_names[$i-1]="${image_name}"
        if [ ${#portps[*]} -gt 1 ] ; then service_names[$i-1]="${image_name}-${port}"; fi

        if ! [ -z "${env[SERVICE_NAME]}" ] ; then service_names[$i-1]="${env[SERVICE_NAME]}"; fi
        if ! [ -z "${env[SERVICE_${port}_NAME]}" ] ; then service_names[$i-1]="${env[SERVICE_${port}_NAME]}"; fi

        service_ids[$i-1]="$(hostname):${container_name}:${port}"
        if [ "$protocol" = "udp" ] ; then service_ids[$i-1]="${service_ids[$i-1]}:udp"; fi

        if ! [ -z "${env[SERVICE_ID]}" ] ; then service_ids[$i-1]="${env[SERVICE_ID]}"; fi
        if ! [ -z "${env[SERVICE_${port}_ID]}" ] ; then service_ids[$i-1]="${env[SERVICE_${port}_ID]}"; fi
    done

    port_list=(${!ports[@]})

    unset out
    declare -A -g out

    unset flags
    declare -A -g flags

    for k in ${!env[@]} ; do
        if [[ $k =~ ^KV_SET:(.+) ]] ; then
            local key="${BASH_REMATCH[1]}"
            local value="${env[$k]}"

            local sed_args=(
                -e "s/#<SERVICE_ID>#/${service_ids[0]}/g"
                -e "s/#<SERVICE_NAME>#/${service_names[0]}/g"
                -e "s/#<IMAGE_NAME>#/${image_name}/g"
                -e "s/#<HOSTNAME>#/$(hostname)/g"
                -e "s/#<CONTAINER_NAME>#/${container_name}/g"
                -e "s/#<CONTAINER_ID>#/$(echo -n "$1" | jq -r ".Id")/g"
                -e "s/#<IMAGE_ID>#/$(echo -n "$1" | jq -r ".Image")/g"
                -e "s/#<IP_ADDRESS>#/$(echo -n "$1" | jq -r ".NetworkSettings.IPAddress")/g"
                -e "s/#<HOST_PORT>#/${host_ports[0]}/g"
            )

            for port in "${!ports[@]}" ; do
                local i="${ports[$port]}"
                sed_args=(
                    "${sed_args[@]}"
                    -e "s/#<SERVICE_${port}_ID>#/${service_ids[$i]}/g"
                    -e "s/#<SERVICE_${port}_NAME>#/${service_names[$i]}/g"
                    -e "s/#<HOST_${port}_PORT>#/${host_ports[$i]}/g"
                )
            done

            for s in "${key}" "${value}" ; do
                if echo "${s}" | grep -q "#jq<.*>#" ; then
                    local expr=$(echo "${s}" | sed -e "s/#jq<\(.*\)>#/\1/")
                    local match=$(echo -n "$1" | jq -r "${expr}")
                    sed_args=("${sed_args[@]}" -e "s!#jq<.*>#!${match}!g")
                fi
            done

            key=$(echo "${key}" | sed "${sed_args[@]}")
            value=$(echo "${value}" | sed "${sed_args[@]}")

            if [[ $key == *\? ]] ; then
                out["${key%%\?}"]="${value}"
                flags["${key%%?}"]="?cas=0"
            else
                out["$key"]="${value}"
            fi
        fi
    done
}

process() {
    for key in ${!out[@]} ; do
        if ! curl -s -X PUT -d "${out[$key]}" "${KV_CONSUL_URL}${key}${flags[$key]}" > /dev/null ; then
            echo "cannot PUT to ${KV_CONSUL_URL}${key}${flags[$key]}"
        fi
    done
}

do_test() {
    set -e

    setup "$(cat test_data/redis)"
    [ ${#service_names[@]} -eq 1 ]
    [ ${service_names[0]} = "redis" ]
    [ ${service_ids[0]} = "$(hostname):tender_euclid:6379" ]

    [ ${out[foo]} = "1" ]
    [ -z ${flags[foo]} ]
    [ ${out[bar]} = "2" ]
    [ ${flags[bar]} = "?cas=0" ]

    [ ${out["redis/$(hostname):tender_euclid:6379/baz"]} = "3" ]
    [ -z ${flags["redis/$(hostname):tender_euclid:6379/baz"]} ]
    [ ${out["redis/$(hostname):tender_euclid:6379/bat"]} = "4" ]
    [ ${flags["redis/$(hostname):tender_euclid:6379/bat"]} = "?cas=0" ]

    [ ${out["hostname"]} = "$(hostname)" ]
    [ ${out["container_name"]} = "tender_euclid" ]
    [ ${out["container_id"]} = "0b1b254c17c0986617a943ad626b0428b85b3b7c3a23d1e3c3f77dfaf45320f3" ]
    [ ${out["image_id"]} = "3ce54e911389a2b08207b0a4d01c3131ce01b617ecc1c248f6d81ffdbebd628d" ]
    [ ${out["ip"]} = "172.17.0.7" ]
    [ ${out["port"]} = "16379" ]
    [ ${out["port2"]} = "16379" ]

    [ ${out["patho"]} = "with=equals" ]
    [[ ${out["patho2"]} = "with space" ]]
    [ ${out["patho3"]} = "with:colon" ]
    [[ ${out["patho4"]} = "with=equals, space and:colon" ]]

    [ ${out["public"]} = "/var/lib/docker/vfs/dir/4688b2aedb4e963d8ae9498858cc2996d63413f9663736394853b263f520f1bb" ]
    echo "1 pass"

    setup "$(cat test_data/redis-multiple-ports)"
    [ ${#service_names[@]} -eq 2 ]
    [ ${service_names[0]} = "redis-6379" ]
    [ ${service_ids[0]} = "$(hostname):tender_euclid:6379" ]
    [ ${service_names[1]} = "redis-6779" ]
    [ ${service_ids[1]} = "$(hostname):tender_euclid:6779:udp" ]

    [ ${out["redis-6379/$(hostname):tender_euclid:6379/baz"]} = "3" ]
    [ ${out["redis-6379-port"]} = "16379" ]
    echo "2 pass"

    setup "$(cat test_data/redis-explicit-name-id)"
    [ ${#service_names[@]} -eq 1 ]
    [ ${#service_ids[@]} -eq 1 ]
    [ ${service_names[0]} = "myredis" ]
    [ ${service_ids[0]} = "myredis-0" ]

    [ ${out["myredis/myredis-0/baz"]} = "3" ]
    [ ${out["myredis/myredis-0/bat"]} = "4" ]
    [ ${flags["myredis/myredis-0/bat"]} = "?cas=0" ]
    [ ${out["image"]} = "redis" ]
    echo "3 pass"

    setup "$(cat test_data/redis-explicit-multiple)"
    [ ${#service_names[@]} -eq 2 ]
    [ ${service_names[0]} = "myredis" ]
    [ ${service_ids[0]} = "myredis-0" ]
    [ ${service_names[1]} = "redis-6779" ]
    [ ${service_ids[1]} = "$(hostname):tender_euclid:6779:udp" ]
    [ ${out["myredis/myredis-0/baz"]} = "3" ]
    echo "4 pass"

    setup "$(cat test_data/no-ports)"
    [ ${#out[@]} -eq 2 ]
    [ ${out[foo]} = "4" ]
    [ ${out["redis/$(hostname):tender_euclid/baz"]} = "7" ]
    echo "all tests passed!"
}

if [ $# -eq 0 ] ; then
    echo "running tests"
    do_test
else
    json=$(cat)
    echo "JSON: ${json}"
    echo -n "${json}" | jq .
    setup "${json}"
    process
fi
